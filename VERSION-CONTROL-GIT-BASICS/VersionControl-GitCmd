# Version Control with Git Basics

## Introduction

Version control is a system that records changes to files over time so that you can recall specific versions later. Git is a popular version control system that allows multiple people to work on a project simultaneously without interfering with each other's changes.

## Key Concepts

- **Repository**: A directory that contains your project files and the entire revision history.
- **Commit**: A snapshot of your files at a specific point in time.
- **Branch**: A separate line of development in your project.
- **Merge**: Combining changes from different branches.

## Git Commands

1. **git init**: Initialize a new Git repository.

    ```bash
    # Create a new repository in current directory
    git init
    ```

2. **git clone [url]**: Create a copy of an existing repository.

    ```bash
    # Clone a remote repository
    git clone https://github.com/user/repo.git
    ```

3. **git add [file]**: Stage changes for the next commit.

    ```bash
    # Stage a specific file
    git add index.html
    # Stage all files
    git add .
    ```

4. **git commit -m "[message]"**: Record changes.

    ```bash
    git commit -m "Add login feature"
    ```

5. **git status**: Check working directory status.

    ```bash
    git status
    ```

6. **git log**: View commit history.

    ```bash
    git log
    ```

7. **git branch**: Manage branches.

    ```bash
    # Create new branch
    git branch feature
    ```

8. **git checkout [branch]**: Switch branches.

    ```bash
    git checkout main
    ```

9. **git merge [branch]**: Combine branches.

    ```bash
    # Merge feature into current branch
    git merge feature
    ```

10. **git push**: Upload local changes to a remote repository.

    ```bash
    # Push changes to the remote repository
    git push origin main
    ```

11. **git pull**: Fetch and merge changes from the remote repository.

    ```bash
    # Pull changes from the remote repository
    git pull origin main
    ```

12. **git reset**: Undo changes.

    ```bash
    # Unstaged changes
    git reset
    # Uncommitted changes
    git reset --soft HEAD~1
    # Discard all changes
    git reset --hard HEAD~1
    ```

13. **git stash**: Temporarily save changes.

    ```bash
    # Stash current changes
    git stash
    # Apply stashed changes
    git stash apply
    ```

14. **git remote**: Manage remote repositories.

    ```bash
    # Add a new remote repository
    git remote add origin https://github.com/user/repo.git
    ```

15. **git config**: Configure Git settings.

    ```bash
    # Set user name and email
    git config --global user.name "Your Name"
    git config --global user.email "your.email@example.com"
    ```

## Conclusion

Git is a powerful tool for version control that helps teams collaborate effectively. By understanding the basic concepts and commands, you can start using Git to manage your projects more efficiently.
